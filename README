Useful papers and data: https://drive.google.com/drive/u/0/folders/1qnYOLpFim9gUH7K8m2bvkeENi474ZKyS

TODO:
Error severity index
Power calculation (sample size estimation)
Label the axes of the ONEST plot
Legend for datasets
Identify the crossover point between 2 curves.


Multiclass Ordinal Metrics Document
https://docs.google.com/document/d/1_v-9WWoWL7Q4XFFECHozLi_WRLNQETD1Z3ZbdIEET38/edit

## From: David Jin, 18 October 2022
## Jansen and Niels,
#
## Turns out that the question you are interested in for your metrics is called 
## ordinal regression. You can find a primer about it on Wikipedia
## https://en.wikipedia.org/wiki/Ordinal_regression.
#
## Unfortunately most of the metrics for ordinal regression are loss functions
## aimed at training AI models. Thus, they are not nicely bounded between 0
## and 1. I worked out some of the math on an alternative reasonable metric.
## I’ve attached a short explanation which I’m happy to walk through on a call
## if you would like.
#
## Basically, if you want a function that takes in a dataset of pairs of ground
## truth and predicted labels, you always get something of a fixed form, which
## is intuitively like a “generalized accuracy”, “generalized precision” or
## “generalized recall”. For an example, I’ll describe “generalized recall”. In
## normal recall (true positives over all positives), all true positives
## contribute 1 point and all false negatives contribute 0 points. In
## generalized recall, each type of mistake is penalized different based on the
## distance of the predicted label from the actual label. A minor
## misclassification may contribute 0.8 points, while the worst misclassification
## may contribute 0 points.
#
## Anyways the above is a reasonably obvious metric to come up with. The
## interesting thing is that if you want a function which comes out between 0
## and 1 and satisfies some intuitive properties (like all elements of the
## dataset are weighted equally, if you get everything right you should get 1,
## etc.), it’s the only reasonable function functional form.
#
## Sincerely,
## David

# To do:
# * how to manage 
# * The cost of misclassification is dependent on the within-case prevelance
# * Low prevalence adverse findings are the driving issue.
# * Look into connected components, other ways to handle dependencies
# * * patches on a slide
# * * slides in a block
# * * blocks from a part
# * * parts from a case
# * * cases from a patient
# * Multi-rater
#   “My views on this are more in line with Grove et al. (1981) who while
#    talking about what diagnosticians in the medical field actually do said
#    this: “They assign the easy cases or “textbook” cases, to diagnoses with
#    little or no error; they may guess or diagnose randomly on the others. If
#    one knew which cases were textbook cases, one could treat them separately;
#    but that is a difficult matter.” 
#                                 -- Gwet’s Handbook of Inter-Rater ReLiability

# Preface
None of the errors herein are mine, the editors are conspiring against me.

# Expected Folders and Setup
- data/prostate_reader/assisted_5class.npy
- data/prostate_reader/unassisted_5class.npy

# Original Data
- data/
    - prostate_reader/
        - assisted_5class.csv
        - unassisted_5class.csv
    - nottingham/
        - mitosis.csv
        - nottingham.csv
        - pleomorphismus.csv
        - tubulus.csv

# Instructions
> Instructions last updated 2024-02-27
> These have not been tested for anything other than comparing exactly 2 sets of data at a time

The analysis starts with `onest_analysis.py` to perform the ONEST and/or CONTEST analyses on the CSV data.
Make sure to cache this to create the appropriate NPYs used in the other programs.

## Getting Started
These instructions assume you have the commands `git` and `python3` installed on your machine. Furthermore, it assumes you have a basic understanding of the terminal and navigation therein.

Open a terminal and navigate to the folder you want this repository to be under. Copy this repository with the following command:
```bash
git clone https://github.com/grepgrok/CONTEST.git
```

In the terminal, open the `CONTEST` folder. From here on, subsequent terminal commans will assume the terminal is currently in the `CONTEST` folder.

## CONTEST/ONEST Analysis
1. Place `.csv` data files in the same folder. This folder should be in the folder `./data/`.
    - For the sake of example, these instructions will call the folder `my_data` and the files `treatment.csv` and `control.csv`.
    > Both sets of data should have the same shape (for example, 20 x 2) and be ordered as cases by observers
2. Create a `./results/my_data` folder.
- Here is an example of the file system structure so far:
    ```
    CONTEST/
    ├── data/
    │   └── my_data/
    │       ├── treatment.csv
    │       └── control.csv
    ├── results/
    │   └── my_data/
    └── README
    ```
3. Open `onest_analysis.py` and scroll to the `get_args` function on line 15.
    1. Change the `dataset_names` on lines 18 and 19 to the paths to the two files. Be mindful of the fact that Python requires a comma `,` at the end of the first file path on line 18.
        ```python
        "dataset_names": [
            "./data/my_data/treatment.csv",
            "./data/my_data/control.csv"
        ]
        ```
    2. Adjust the `colors` and `labels` on lines 22 through 29 as desired. These accordingly control the color and label associated with `treatment.csv` and `control.csv` on the plot of the analysis.
        > The values under `colors` must be [named matplotlib colors][mpl-colors]. The values under `labels` may be any strings.
    3. Set `method` to `onest` or `contest` for the ONEST or CONTEST analyses accordlingly. Note that the subsequent analyses below require this to be `contest`.
    4. If you would like to plot all manifolds of the analysis, set `describe` on line 31 to `False`. Conversely, setting `describe` to `True` will show only the minimum, maximum, and mean of the envelope in the ONEST method and only the minimum and maximum in the CONTEST method.
    5. Make sure `cache` is set to `True`
    6. Advanced: The number of unique manifolds may be adjusted: change the default value for `unique_curves` on line 220 for ONEST; change `unique_surfaces` on line 265 for CONTEST. Larger numbers may be more accurate but will take longer to compute. See [Thoughts and Notes](#thoughts-and-notes) below for commentary on this.
4. In the terminal, run the following command:
```bash
python3 onest_analysis.py
```

This may take some time, feel free to get some coffee.

The file system structure should now look something like this:
```
CONTEST/
├── data/
│   └── my_data/
│       ├── treatment.csv
│       ├── treatment.npy
│       ├── control.csv
│       └── control.npy
├── results/
│   ├── my_data/
│   └── onest.png
└── README
```

Subsequent analyses especially require the prescence of the `.npy` file created by this analysis: `./data/my_data/treatment.npy` and `./data/my_data/control.npy`. Also, they assume the executed analysis was the CONTEST analysis (`"method": "contest"` above in Step 3.3).

[mpl-colors]: https://matplotlib.org/stable/gallery/color/named_colors.html

### Running Already Analyzed Data
Since running the analysis can take a lot of time, you can re-run the plotting after obtaining the cached `.npy` files by simply replacing the `.csv` with `.npy` in the `dataset_names` on lines 18 and 19. The program will skip the analysis part, significantly speeding up graphical analysis.

# Thoughts and Notes
As described in the [original paper][onest-paper], the ONEST/CONTEST manifolds are (theoretically) random and unique permutations of the observers (and cases). This means that, for 20 observers and 240 cases, there should be $19!$ (about $1.2 \times 10^{17}$) ONEST curves. Likewise, there should be $19! \cdot 240!$ (about $4.9 \times 10^{485}$) CONTEST surfaces. In practice, the number of CONTEST surfaces is bounded above by the respective number of ONEST curves. This is because we get the observers and cases for a surface at the same time (see `onest_analysis.py:102`). Also, if the number of unique manifolds is set greater than the factorial of one less than the number of observers, the code is liable to enter an infinite loop trying to find the next set of observers for a surface.

# TODO
- Walk through the data folder for the data
- Rename all instances of sarape to contest if possible
- Do better `get_args`
- Automatically create sarapes in alpha.py:get_data
- Choose consistent way to convert list to ndarray (note when other is necessary)
    - `np.array`
    - `np.asarray`
    - `np.empty` -> fill
- Choose consistent way to execute function over ndarray (`alpha.py:289`, `alpha.py:144`, `alpha.py:144`)
- Choose consistent way to identify assissted/unassisted or treatment/control
- Choose consistent style of docstring
- Figure out a consistent style of execution workflow (or decide to give up on it)
- Add detailed docstrings with parameter and return types

- Cleanup
- `pip3 freeze > requirements.txt`
- includes `examples` folder
    - Add
        - prostate_reader (DOI: 10.1001/jamanetworkopen.2020.23267)
        - nottingham (DOI: 10.1016/j.prp.2021.153718)
        - [PDL1](https://cran.r-project.org/web/packages/ONEST/index.html) (doi:10.1038/s41379-020-0544-x)
- Write up instructions on running some data from the beginning
- Get dad to run PDL1 from instructions I write up

```python
for root, subdirs, files in os.walk(sys.argv[1]):
    for filename in files:
        path = os.path.join(root, filename)
        nameBool, ext = nameCheck(path)
```

# Future Considerations
We calculate the OPA as the proportion of the number of observer agreements to total number of cases. There may be multiple ways to calculate this. The [FDA discuss overall percent agreement][fda-opa] in a 2-class positive vs. negative context.

[fda-opa]: https://www.fda.gov/files/medical%20devices/published/Guidance-for-Industry-and-FDA-Staff---Statistical-Guidance-on-Reporting-Results-from-Studies-Evaluating-Diagnostic-Tests-%28PDF-Version%29.pdf
[slides]: https://docs.google.com/presentation/d/1b7S_4nVgq0DsrQRkU7vEaCQtnOKafUGa/edit#slide=id.g22e7b4ae203_0_166